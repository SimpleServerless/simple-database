AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "Simple serverless database configuration"

Parameters:
  StageName:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
      - local
      - stage
    Description: The environment to be run on (typically local, dev, stage or prod)


Mappings:
  Environment:
    dev:
      "DBClusterIdentifier": "simple-serverless-aurora-serverless-development"
      "DBName": "simple_serverless_dev"
      "BackupRetentionPeriod": 1
      "DBInstancePrimaryIdentifier": "simple-severless-primary-development"

    prod:
      "DBClusterIdentifier": "simple-serverless-aurora-serverless-production"
      "DBName": "simple_serverless_prod"
      "BackupRetentionPeriod": 1
      "DBInstancePrimaryIdentifier": "simple-severless-primary-production"


Conditions:
  IsProdCondition:
    !Equals [!Ref StageName, prod]

Resources:

  # Create a security group to be used by anything accessing this DB
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SimpleServerlessSG
      VpcId: '{{resolve:ssm:VpcId:1}}'
      GroupDescription: Simple service lambda security group

  # Create the security group to be used by this DB
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SimpleServerlessDBSG
      VpcId: '{{resolve:ssm:VpcId:1}}'
      GroupDescription: Simple service db security group
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      # Delete this if you do not want to access your database via a bastion server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt AppSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          # Imports BastionSG from stack deployed from https://github.com/SimpleServerless/simple-bastion
          SourceSecurityGroupId: !ImportValue BastionSG
    DependsOn: AppSecurityGroup

  DBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: All private subnets
      SubnetIds:
        - '{{resolve:ssm:private-subnet-1:1}}'
        - '{{resolve:ssm:private-subnet-2:1}}'
        - '{{resolve:ssm:private-subnet-3:1}}'
      Tags:
        - Key: Name
          Value: SimpleServerlessDBSubnetGroup
    Type: "AWS::RDS::DBSubnetGroup"

  DatabaseServlerless:
    Type: AWS::RDS::DBCluster
    # If this entire CloudFormation stack is deleted make a snapshot first.
    DeletionPolicy: Snapshot
    Properties:
      DBClusterIdentifier: !FindInMap [Environment, !Ref StageName, DBClusterIdentifier]
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: '17.4'
      Port: 5432
      EnableHttpEndpoint: true
      StorageEncrypted: true
      DatabaseName: {"Fn::FindInMap": [ "Environment", { "Ref": "StageName" }, "DBName"]}
      # IMPORTANT: If copying this template don't re-use this secretsmanager name for your project
      MasterUsername: '{{resolve:secretsmanager:simple-serverless/db-credentials:SecretString:username}}'
      MasterUserPassword: '{{resolve:secretsmanager:simple-serverless/db-credentials:SecretString:password}}'
      BackupRetentionPeriod: !FindInMap [Environment, !Ref StageName, BackupRetentionPeriod]
      DeletionProtection: false # Should always be true in production
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0
        MaxCapacity: 2

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DatabaseServlerless
      DBInstanceIdentifier: !FindInMap [Environment, !Ref StageName, DBInstancePrimaryIdentifier]
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      PubliclyAccessible: false

  # This is needed to allow the lambda to access the secretsmanager for credentials
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SimpleServerlessVPCEndpointSG
      VpcId: !Sub '{{resolve:ssm:VpcId}}'
      GroupDescription: Security group for VPC Endpoints
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt AppSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: SimpleServerlessVPCEndpointSG

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Sub '{{resolve:ssm:VpcId}}'
      VpcEndpointType: Interface
      SubnetIds:
        - !Sub '{{resolve:ssm:private-subnet-1}}'
        - !Sub '{{resolve:ssm:private-subnet-2}}'
        - !Sub '{{resolve:ssm:private-subnet-3}}'
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
    DependsOn: VPCEndpointSecurityGroup

Outputs:
  SimpleSSHost:
    Value: !GetAtt DatabaseServlerless.Endpoint.Address
    Export:
      Name: !Sub 'simple-serverless-database-${StageName}-Host'
  SimpleSSName:
    Value: !FindInMap [Environment, !Ref StageName, DBName]
    Export:
      Name: !Sub 'simple-serverless-database-${StageName}-Name'
  SimpleSSAppSecurityGroupId:
    Value: !GetAtt AppSecurityGroup.GroupId
    Export:
      Name: !Sub 'simple-serverless-database-${StageName}-AppSGId'
